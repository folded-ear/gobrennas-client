# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

interface AccessControlled {
    grants: [AccessControlEntry!]!
    owner: User!
}

interface Node {
    id: ID!
}

type AccessControlEntry {
    level: AccessLevel
    user: User
}

type Mutation {
    timer: TimerMutation
}

type Plan implements AccessControlled & Node {
    buckets: [PlanBucket]
    grants: [AccessControlEntry!]!
    id: ID!
    name: String!
    owner: User!
}

type PlanBucket {
    date: Date!
    id: ID!
    name: String!
}

"Represents a single item on a plan"
type PlanItem implements Node {
    bucket: PlanBucket
    components: [PlanItem]
    id: ID!
    name: String!
    notes: String
    parent: PlanItem
    preparation: String
    quantity: NonNegativeFloat
    status: TaskStatus!
    subtasks: [PlanItem]
    units: String
}

type Query {
    getCurrentUser: User
    getPlanItem(id: ID!): PlanItem
    getPlans: [Plan]
    node(id: ID!): Node
    timer: TimerQuery
}

"Represents a pause-able timer of user-specified length."
type Timer implements AccessControlled & Node {
    "Whether the timer is complete."
    complete: Boolean!
    "Number of seconds the timer is currently set for."
    duration: PositiveInt!
    "When the timer reached or will reach completion; null if paused."
    endAt: DateTime
    grants: [AccessControlEntry!]!
    id: ID!
    "Number of seconds the timer was originally created for."
    initialDuration: PositiveInt!
    owner: User!
    "Whether the timer is paused."
    paused: Boolean!
    "Number of seconds remaining; negative if already complete."
    remaining: Int!
    "Whether the timer is running."
    running: Boolean!
}

type TimerMutation {
    """

    Add the specified duration to the specified timer, which may not be
    complete, but may be paused.
    """
    addTime(duration: PositiveInt!, id: ID!): Timer!
    "Create a new timer with the specified duration and start it."
    create(duration: PositiveInt!): Timer!
    """

    Ensure the specified timer has been deleted, regardless of its status or
    existence, returning whether any action was taken.
    """
    delete(id: ID!): Boolean!
    "Pause the specified running timer."
    pause(id: ID!): Timer!
    "Resume the specified paused timer."
    resume(id: ID!): Timer!
}

type TimerQuery {
    all: [Timer!]!
    byId(id: ID!): Timer!
}

type User {
    email: String
    id: ID!
    imageUrl: String
    name: String
    provider: String
}

enum AccessLevel {
    ADMINISTER
    CHANGE
    VIEW
}

enum TaskStatus {
    ACQUIRED
    COMPLETED
    DELETED
    NEEDED
}

"An RFC-3339 compliant Full Date Scalar"
scalar Date

"An RFC-3339 compliant DateTime Scalar"
scalar DateTime

"An Float scalar that must be greater than or equal to zero"
scalar NonNegativeFloat

"An Int scalar that must be a positive value"
scalar PositiveInt
